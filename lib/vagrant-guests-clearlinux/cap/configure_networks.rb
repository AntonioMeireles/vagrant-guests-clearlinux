# encoding: UTF-8
# Copyright (c) 2018 Ant√≥nio Meireles. All Rights Reserved.

require 'tempfile'
require 'ipaddr'
require 'log4r'

# Borrowed from http://stackoverflow.com/questions/1825928/netmask-to-cidr-in-ruby
IPAddr.class_eval do
  def to_cidr
    to_i.to_s(2).count('1')
  end
end

VAGRANT_NETWORK = <<EOF.freeze
#VAGRANT-BEGIN
# The contents below were automatically generated by Vagrant. Do not modify.
[Match]
Name=%s

[Network]
DHCP=%s
%s
#VAGRANT-END
EOF

module VagrantPlugins
  module GuestClearLinux
    module Cap
      class ConfigureNetworks
        include Vagrant::Util
        extend Vagrant::Util::GuestInspection::Linux
        NETWORKD_DIRECTORY = "/etc/systemd/network".freeze
        @@logger = Log4r::Logger.new('vagrant::guest::clearlinux::configure_networks')

        def self.configure_networks(machine, networks)
          comm = machine.communicate
          interfaces = machine.guest.capability(:network_interfaces)
          networks.each do |network|
            interface = network[:interface].to_i
            device = interfaces[interface]
            if device.nil?
              @@logger.warn("Could not find match rule for network #{network.inspect}")
              next
            end
            unit_name = format('50-vagrant-%s.network', device)

            if network[:type] == :static
              leased = "no"
              cidr = IPAddr.new(network[:netmask]).to_cidr
              body = "Address=#{network[:ip]}/#{cidr}"
              body += "\nGateway=#{network[:gateway]}" if network[:gateway]
            elsif network[:type] == :dhcp
              leased = "yes"
              body = ""
            end

            unit_file = format(VAGRANT_NETWORK, device, leased, body)
            temp = Tempfile.new('vagrant')
            temp.binmode
            temp.write(unit_file)
            temp.close

            comm.upload(temp.path, "/tmp/#{unit_name}")
            comm.sudo([ "mkdir -p #{NETWORKD_DIRECTORY}",
              "rm -f #{NETWORKD_DIRECTORY}/#{unit_name}",
              "mv /tmp/#{unit_name} #{NETWORKD_DIRECTORY}",
              "chown root:root #{NETWORKD_DIRECTORY}/#{unit_name}",
              "chmod a+r #{NETWORKD_DIRECTORY}/#{unit_name}",
              "systemctl restart systemd-networkd"].join("\n"))
            comm.wait_for_ready(30)
          end
        end
      end
    end
  end
end
